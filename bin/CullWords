#!/usr/bin/perl
#
########################################################################################################################
########################################################################################################################
##
##      Copyright (C) 2020 Peter Walsh, Milford, NH 03055
##      All Rights Reserved under the MIT license as outlined below.
##
##  FILE
##      CullWords
##
##  DESCRIPTION
##
##      Cull words in current project directory for applicability
##
##      Show all the words in the Words.txt file, and allow the user to delete the ones that
##        aren't applicable.
##
##  USAGE
##
##      CullWords
##
##  EXAMPLE
##
##      CullWords
##
##      This will read in Words.txt, show all words in the current directory, and allow the
##        user to delete the ones that aren't needed.
##
########################################################################################################################
########################################################################################################################
##
##  MIT LICENSE
##
##  Permission is hereby granted, free of charge, to any person obtaining a copy of
##    this software and associated documentation files (the "Software"), to deal in
##    the Software without restriction, including without limitation the rights to
##    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
##    of the Software, and to permit persons to whom the Software is furnished to do
##    so, subject to the following conditions:
##
##  The above copyright notice and this permission notice shall be included in
##    all copies or substantial portions of the Software.
##
##  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
##    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
##    PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
##    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
##    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
##    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##
########################################################################################################################
########################################################################################################################

use strict;
use warnings;
use Carp;

our $VERSION = 'CullImages2021-06-30';

use Tk;
use Tk::Text;

use Image::Magick;
use MIME::Base64;

use Cwd qw(cwd);
use File::Slurp;
use File::Basename;
use List::MoreUtils qw(firstidx);

########################################################################################################################
########################################################################################################################
##
## Data declarations
##
########################################################################################################################
########################################################################################################################

my $MaxColumns   = 10;              # Max number of columns of images per screen
my $MaxRows      = 25;              # Max number of rows    of images per screen

my $TitleHeight  = 76;              # No way to determine this from Tk
my $Something    = 30;


my $Project      = basename cwd();
my $MainTitle    = "Click to cull words for '$Project': N for next page, L for last page, ESC to abort";
my $MainWindow   = MainWindow->new(-title => $MainTitle);   # Main window

my $ScreenWidth  = $MainWindow->screenwidth();
my $ScreenHeight = $MainWindow->screenheight();

my $ButtonWidth   = 20;             # In characters displayed
my $ButtonHeight  = 1;

my @Words  = read_file("Words.txt",{ binmode => ':utf8', chomp => 1 });
my @Delete = ((0) x scalar @Words);

my $Row;
my $Column;

my $WordIndex;

$MainWindow->bind("<Escape>" => \&Escape); 
$MainWindow->bind("<Key-N>"   => \&NextPage); 
$MainWindow->bind("<Key-n>"   => \&NextPage); 
$MainWindow->bind("<Key-L>"   => \&LastPage); 
$MainWindow->bind("<Key-l>"   => \&LastPage); 

sub NextPage {

    ShowWordGrid();
    }

sub LastPage {

    $WordIndex = scalar @Words;
    ShowWordGrid();
    }

sub Escape {

    print "Esc -> quit\n";
    exit(0);
    }

########################################################################################################################
########################################################################################################################
##
## CullWords
##
########################################################################################################################
########################################################################################################################

$WordIndex = 0;

ShowWordGrid();

MainLoop;

my $NumDelete = grep {$_ > 0} @Delete;

if( $NumDelete ) {

    unless( AskForConfirmation("Delete $NumDelete words? ") ) {
        print "Declined - no files deleted.\n";
        print "\n";
        exit(0);
        }

    for( my $Index = 0; $Index < scalar @Words; $Index++ ) {

        next
            unless $Delete[$Index];

        my $Word = $Words[$Index];

        print "Deleting $Word...\n";
        delete $Words[$Index];
        }

    @Words = grep { defined $_ } @Words;

    write_file("Words.txt",join("\n",@Words));
    }

print "Done!\n";
print "\n";

exit(0);

########################################################################################################################
########################################################################################################################
#
# ShowWordGrid - Show a grid of images, starting with $WordIndex
#
# Inputs:   None.
#
# Outputs:  None. 
#
sub ShowWordGrid {

    if( $WordIndex >= scalar  @Words ) {
        $MainWindow->destroy;
        return;
        }

    $_->destroy
        foreach $MainWindow->children();

    $Column = 0;
    $Row    = 0;

    AddWord()
        while $Row        < $MaxRows    &&
              $Column     < $MaxColumns &&
              $WordIndex < scalar @Words;
    }

########################################################################################################################
########################################################################################################################
#
# AddWord - Add one image to the image grid
#
# Inputs:   None.
#
# Outputs:  None. 
#
sub AddWord {

    my $Word   = $Words[$WordIndex];
#    my $Button = $MainWindow->Button(-width => $ButtonWidth, -height => $ButtonHeight, -text => $Word, -borderwidth => 0, -relief => "flat")
    my $Button = $MainWindow->Button(-text => $Word, -width => $ButtonWidth, -height => $ButtonHeight)
                            ->grid  (-row => $Row, -column => $Column, -sticky => 'n');

    $Button->bind('<ButtonRelease-1>' => \&WordClick);

    $Column += 1;

    if( $Column >= $MaxColumns ) {
        $Column = 0;
        $Row++;
        }

    $WordIndex++;
    }

sub WordClick {
    my $Button = shift;

    my $Name  = $Button->cget('-text');
    my $Index = firstidx { $_ eq $Name } @Words;

    $Delete[$Index] = 1 - $Delete[$Index];          # Keep value numeric (not boolean), in case of print

    if( $Delete[$Index] ) { $Button->configure(-background =>       "red"); }
    else                  { $Button->configure(-background => "lightgray"); }

#    if( $Delete[$Index] ) { $Button->configure(-width => $ButtonWidth/2, -height => $ButtonHeight/2) }
#    else                  { $Button->configure(-width => $ButtonWidth  , -height => $ButtonHeight  ) }

    print "Name: $Name, Index: $Index, Delete: " . ($Delete[$Index] ? "Y" : "N") . "\n";
    }


########################################################################################################################
########################################################################################################################
##
## AskForConfirmation - Print a message, prompt user, and return yes/no resopnse
##
## Inputs:      Message to prompt
##              TRUE  if blank line means assent, default 1 if not specified
##
## Outputs:     TRUE  if user responded in the affirmative ('y', 'yes', and such)
##              FALSE if user responded in the negative    ('n', 'no' , and such)
##
sub AskForConfirmation {
    my $Msg           = shift;
    my $BlankIsAssent = shift // 1;
    
    while(1) {
        print $Msg;    
        chomp ($_=<STDIN>);

        return 1
            if /^(y|yes)$/i;

        return 0
            if /^(n|no)$/i;

        #
        # See if user typed blank line
        #
        return 1
            if length $_ == 0 && $BlankIsAssent;

        print "Incorrect response. Please enter 'y' or 'n'\n";
        print "\n";
        }
    }
