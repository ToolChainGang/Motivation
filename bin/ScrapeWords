#!/usr/bin/perl
#
########################################################################################################################
########################################################################################################################
##
##      Copyright (C) 2020 Peter Walsh, Milford, NH 03055
##      All Rights Reserved under the MIT license as outlined below.
##
##  FILE
##      ScrapeWords.pl
##
##  DESCRIPTION
##
##      Scrape project words from relatedwords.io, save as Words.txt
##
##      Take a project descriptors (ex: "pottery") and grab the related words from 
##        relatedwords.io and save as "Words.txt" in the current directory.
##
##      If the Words.txt file exists, extra words will be added. Duplicate words
##        will only appear once.
##
##      The words will need to be vetted by a human for applicability, use the
##        supplied program "CullWords" for that.
##
##  USAGE
##
##      ScrapeWords <keyword1> [<keyword2> ...]
##
##      <keyword>           Some keyword to use as the search term (ex: "pottery")
##
##  EXAMPLE
##
##      ScrapeWords pottery ceramics clay
##
##      This will retrieve the words from "pottery", "ceramics", and "clay" from the
##        relatedwords.io website. Duplicates will be downloaded only once.
##
########################################################################################################################
########################################################################################################################
##
##  MIT LICENSE
##
##  Permission is hereby granted, free of charge, to any person obtaining a copy of
##    this software and associated documentation files (the "Software"), to deal in
##    the Software without restriction, including without limitation the rights to
##    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
##    of the Software, and to permit persons to whom the Software is furnished to do
##    so, subject to the following conditions:
##
##  The above copyright notice and this permission notice shall be included in
##    all copies or substantial portions of the Software.
##
##  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
##    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
##    PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
##    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
##    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
##    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##
########################################################################################################################
########################################################################################################################

use strict;
use warnings;
use Carp;

use URI;
use LWP::Simple;
use HTML::TreeBuilder;

use File::Slurp;
use List::MoreUtils qw(uniq);
use List::Util      qw(first);

########################################################################################################################
########################################################################################################################
##
## Data declarations
##
########################################################################################################################
########################################################################################################################

my $WordsFile   = "Words.txt";
my $MaxWords    = 30;           # Maximum words to scrape, per search term

my @SearchTerms = @ARGV;        # All search terms

my $WordCount   = 0;

my %Words;                      # List of words already downloaded

#
# Top level URL to search for one term
#
my $TopURL = "https://relatedwords.io/SEARCH_TERM";

binmode(STDOUT, ":utf8");       # Allow UTF8 when printing words

########################################################################################################################
########################################################################################################################
##
## ScrapeWords
##
########################################################################################################################
########################################################################################################################

die "No search terms found."
    unless scalar @SearchTerms;

#
# Note the existing words in the words file, to avoid duplicates
#
my @ExistingWords;

@ExistingWords = read_file($WordsFile, { chomp => 1 })
    if -e $WordsFile;

$Words{$_} = 1
    foreach @ExistingWords;

ScrapeTerm($_)
    foreach @SearchTerms;

#
# Spruce up the words array and write out the file
#
my @TotalWords = map { lc $_ } keys %Words;

$_ =~ s/^\s+|\s+$//g                # Trim spaces, both sides
    foreach @TotalWords;

@TotalWords = uniq @TotalWords;
@TotalWords = sort @TotalWords;

write_file($WordsFile,{binmode => ':utf8'},join("\n",@TotalWords));

print "Done. $WordCount words added to Words.txt\n";

exit(0);


########################################################################################################################
########################################################################################################################
#
# ScrapeTerm - Grab 200 images for a specified search term
#
# Inputs:   Search term to check.
#
# Outputs:  None.
#
sub ScrapeTerm {
    my $Term = lc shift;

    print "Term: $Term\n";

    my $URL = $TopURL;
    $URL =~ s/SEARCH_TERM/$Term/;

    print "    WebPage: $URL\n";

    my $ua = LWP::UserAgent->new(timeout => 10);
    $ua->env_proxy;
    $ua->agent('Mozilla/5.0');
 
    my $Page = $ua->get($URL);
 
    die $Page->status_line . " (Term => $Term)"
        unless $Page->is_success;

    ########################################################################################################################
    #
    #   <span class="term">
    #             <a href="/vase">vase</a>
    #             </span>
    #
    my $Tree = HTML::TreeBuilder->new->parse($Page->decoded_content);

    my @WordTags = $Tree->look_down('_tag', 'span', 'class', 'term');

    $#WordTags   = $MaxWords;

    ScrapeWord($_,$URL)
        foreach @WordTags;
    }


########################################################################################################################
########################################################################################################################
#
# ScrapeWord - Scrape single word from website
#
# Inputs:   Span containing term/word link
#
# Outputs:  None.
#
sub ScrapeWord {
    my $WordTag = shift;

    #
    # <a href="/vase">vase</a>
    #
    my $LinkTag = $WordTag->look_down('_tag', 'a');

    die "could not get link tag for $WordTag\n"
        unless defined $LinkTag;

    my @WordList = $LinkTag->content_list;

    die "Multiple words"
        unless scalar @WordList == 1;

    my $Word = lc $WordList[0];

    if( $Words{$Word} ) {
        print "        Skip: $Word (exists)\n";
        return;        
        }

    print "        Add : $Word\n";

    $Words{$Word} = 1;
    $WordCount++;
    }
